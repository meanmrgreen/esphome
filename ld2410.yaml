# Numbers For Configuration
number:
  - platform: ld2410
    timeout:
      name: Radar Timeout
    max_move_distance_gate:
      name: Radar Max Move Distance
    max_still_distance_gate:
      name: Radar Max Still Distance
    g0:
      move_threshold:
        name: g0 move threshold
      still_threshold:
        name: g0 still threshold
    g1:
      move_threshold:
        name: g1 move threshold
      still_threshold:
        name: g1 still threshold
    g2:
      move_threshold:
        name: g2 move threshold
      still_threshold:
        name: g2 still threshold
    g3:
      move_threshold:
        name: g3 move threshold
      still_threshold:
        name: g3 still threshold
    g4:
      move_threshold:
        name: g4 move threshold
      still_threshold:
        name: g4 still threshold
    g5:
      move_threshold:
        name: g5 move threshold
      still_threshold:
        name: g5 still threshold
    g6:
      move_threshold:
        name: g6 move threshold
      still_threshold:
        name: g6 still threshold
    g7:
      move_threshold:
        name: g7 move threshold
      still_threshold:
        name: g7 still threshold
    g8:
      move_threshold:
        name: g8 move threshold
      still_threshold:
        name: g8 still threshold

binary_sensor:
  - platform: ld2410
    has_target:
      name: Radar Target
      id: radar_has_target
    has_moving_target:
      name: Radar Moving Target
      id: radar_has_moving_target
    has_still_target:
      name: Radar Still Target
      id: radar_has_still_target
             
  ## Set Up Radar Zones Based On Distance
  - platform: template
    name: "Radar Zone 1 Occupancy"
    id: radar_zone_1_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      bool still_in_zone = id(radar_has_still_target).state && (id(still_distance).state >= id(radar_z1_start).state) && (id(still_distance).state <= id(radar_z1_end).state);
      bool moving_in_zone = id(radar_has_moving_target).state && (id(moving_distance).state >= id(radar_z1_start).state) && (id(moving_distance).state <= id(radar_z1_end).state);
      
      if (still_in_zone || moving_in_zone) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 2 Occupancy"
    id: radar_zone_2_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      bool still_in_zone = id(radar_has_still_target).state && (id(still_distance).state > id(radar_z1_end).state) && (id(still_distance).state <= id(radar_z2_end).state);
      bool moving_in_zone = id(radar_has_moving_target).state && (id(moving_distance).state > id(radar_z1_end).state) && (id(moving_distance).state <= id(radar_z2_end).state);

      if (still_in_zone || moving_in_zone) {
        return true;
      } else {
        return false;
      }
  - platform: template
    name: "Radar Zone 3 Occupancy"
    id: radar_zone_3_occupancy
    device_class: occupancy
    icon: mdi:motion-sensor
    lambda: |-
      bool still_in_zone = id(radar_has_still_target).state && (id(still_distance).state > id(radar_z2_end).state) && (id(still_distance).state <= id(radar_z3_end).state);
      bool moving_in_zone = id(radar_has_moving_target).state && (id(moving_distance).state > id(radar_z2_end).state) && (id(moving_distance).state <= id(radar_z3_end).state);

      if (still_in_zone || moving_in_zone) {
        return true;
      } else {
        return false;

ld2410:
  id: ld2410_radar

sensor:
  - platform: ld2410
    moving_distance:
      name: Radar Moving Distance
      id: moving_distance
      filters:
        - lambda: |-
            static float last_reported_value = 0.0;
            float current_value = x;

            // Check if the radar_has_moving_target sensor is off
            if (!id(radar_has_moving_target).state) {
              return NAN;
            }

            // Check if the reduce_db_reporting switch is on
            if (id(reduce_db_reporting).state) {
              // Apply delta filter: only report if the value has changed by 2 or more
              if (abs(current_value - last_reported_value) >= 5.0) {
                last_reported_value = current_value;  // Update the last reported value
                return current_value;
              } else {
                // Return the last reported value without updating if change is less than 2
                return {};  // Discard the update
              }
            } else {
              // If reduce_db_reporting is off, report the current value normally
              last_reported_value = current_value;
              return current_value;
            }
    still_distance:
      name: Radar Still Distance
      id: still_distance
      filters:
        - lambda: |-
            static float last_reported_value = 0.0;
            float current_value = x;

            // Check if the radar_has_still_target sensor is off
            if (!id(radar_has_still_target).state) {
              return NAN;
            }

            // Check if the reduce_db_reporting switch is on
            if (id(reduce_db_reporting).state) {
              // Apply delta filter: only report if the value has changed by 2 or more
              if (abs(current_value - last_reported_value) >= 5.0) {
                last_reported_value = current_value;  // Update the last reported value
                return current_value;
              } else {
                // Return the last reported value without updating if change is less than 2
                return {};  // Discard the update
              }
            } else {
              // If reduce_db_reporting is off, report the current value normally
              last_reported_value = current_value;
              return current_value;
            }
    moving_energy:
      name: Radar Move Energy
      id: radar_moving_energy
      filters:
        - lambda: |-
            if (id(reduce_db_reporting).state) return {};
            return x;
    still_energy:
      name: Radar Still Energy
      id: radar_still_energy
      filters:
        - lambda: |-
            if (id(reduce_db_reporting).state) return {};
            return x;
    detection_distance:
      name: Radar Detection Distance
      id: radar_detection_distance
      filters:
        - lambda: |-
            static float last_reported_value = 0.0;
            float current_value = x;

            // Check if the radar_has_target sensor is off
            if (!id(radar_has_target).state) {
              return NAN;
            }

            // Check if the reduce_db_reporting switch is on
            if (id(reduce_db_reporting).state) {
              // Apply delta filter: only report if the value has changed by 2 or more
              if (abs(current_value - last_reported_value) >= 5.0) {
                last_reported_value = current_value;  // Update the last reported value
                return current_value;
              } else {
                // Return the last reported value without updating if change is less than 2
                return {};  // Discard the update
              }
            } else {
              // If reduce_db_reporting is off, report the current value normally
              last_reported_value = current_value;
              return current_value;
            }
    g0:
      move_energy:
        name: g0 move energy
        state_class: measurement
      still_energy:
        name: g0 still energy
        state_class: measurement
    g1:
      move_energy:
        name: g1 move energy
        state_class: measurement
      still_energy:
        name: g1 still energy
        state_class: measurement
    g2:
      move_energy:
        name: g2 move energy
        state_class: measurement
      still_energy:
        name: g2 still energy
        state_class: measurement
    g3:
      move_energy:
        name: g3 move energy
        state_class: measurement
      still_energy:
        name: g3 still energy
        state_class: measurement
    g4:
      move_energy:
        name: g4 move energy
        state_class: measurement
      still_energy:
        name: g4 still energy
        state_class: measurement
    g5:
      move_energy:
        name: g5 move energy
        state_class: measurement
      still_energy:
        name: g5 still energy
        state_class: measurement
    g6:
      move_energy:
        name: g6 move energy
        state_class: measurement
      still_energy:
        name: g6 still energy
        state_class: measurement
    g7:
      move_energy:
        name: g7 move energy
        state_class: measurement
      still_energy:
        name: g7 still energy
        state_class: measurement
    g8:
      move_energy:
        name: g8 move energy
        state_class: measurement
      still_energy:
        name: g8 still energy
        state_class: measurement

switch:
  - platform: ld2410
    bluetooth:
      name: "ld2410 Bluetooth"
      id: radar_bluetooth
    engineering_mode:
      name: "Radar Engineering Mode"
  - platform: template
    name: "Reduce DB Reporting"
    id: reduce_db_reporting
    icon: mdi:database
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"

select:
  - platform: ld2410
    distance_resolution:
      name: "ld2410 Gate Size"
      disabled_by_default: true